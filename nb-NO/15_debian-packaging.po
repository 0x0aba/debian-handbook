msgid ""
msgstr ""
"Project-Id-Version: 0\n"
"POT-Creation-Date: 2016-04-10 09:00+0900\n"
"PO-Revision-Date: 2016-12-30 02:07+0000\n"
"Last-Translator: Andreas Nordal <andreas.nordal@gmail.com>\n"
"Language-Team: Norwegian Bokmål <https://hosted.weblate.org/projects/debian-handbook/15_debian-packaging/nb_NO/>\n"
"Language: nb-NO\n"
"MIME-Version: 1.0\n"
"Content-Type: application/x-publican; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Plural-Forms: nplurals=2; plural=n != 1;\n"
"X-Generator: Weblate 2.11-dev\n"

msgid "Backport"
msgstr "Bakdør"

msgid "Rebuild"
msgstr "Gjenoppbygge"

msgid "Source package"
msgstr "Kildepakke"

msgid "Archive"
msgstr "Arkiv"

msgid "Meta-package"
msgstr "Meta-pakke"

msgid "Debian Developer"
msgstr "Debian utvikler"

msgid "Maintainer"
msgstr "Vedlikeholder"

msgid "Creating a Debian Package"
msgstr "Å lage en Debian-pakke"

msgid "It is quite common, for an administrator who has been handling Debian packages in a regular fashion, to eventually feel the need to create their own packages, or to modify an existing package. This chapter aims to answer the most common questions in this field, and provide the required elements to take advantage of the Debian infrastructure in the best way. With any luck, after trying your hand for local packages, you may even feel the need to go further than that and join the Debian project itself!"
msgstr "Det er nokså vanlig for en administrator som har håndtert Debian-pakker jevnlig å etter hvert ønske å lage egne pakker eller modifisere en eksisterende pakke. Dette kapittelet tar sikte på å svare på de vanligste spørsmålene på dette området og gi nødvendige instrukser for å utnytte Debians infrastruktur på beste måte. Med litt flaks, etter å ha prøvd deg fram med lokale pakker, kan du kanskje til og med tenke deg å gå lengre, og bli med i Debian-prosjektet selv!"

msgid "Rebuilding a Package from its Sources"
msgstr "Å bygge om en pakke fra sine kilder"

msgid "Rebuilding a binary package is required under several sets of circumstances. In some cases, the administrator needs a software feature that requires the software to be compiled from sources, with a particular compilation option; in others, the software as packaged in the installed version of Debian is not recent enough. In the latter case, the administrator will usually build a more recent package taken from a newer version of Debian — such as <emphasis role=\"distribution\">Testing</emphasis> or even <emphasis role=\"distribution\">Unstable</emphasis> — so that this new package works in their <emphasis role=\"distribution\">Stable</emphasis> distribution; this operation is called “backporting”. As usual, care should be taken, before undertaking such a task, to check whether it has been done already — a quick look on the Debian Package Tracker for that package will reveal that information. <ulink type=\"block\" url=\"https://tracker.debian.org/\" /> <indexterm><primary>backport</primary></indexterm>"
msgstr "Å bygge om en binær pakke er nødvendig under flere omstendigheter. I noen tilfeller trenger administratoren en programvarefunksjon som krever at programvaren som skal kompileres fra kilder med et spesielt kompileringsalternativ; i andre, er programvaren som er pakket i den installerte versjonen av Debian ikke ny nok. I det sistnevnte tilfelle vil administratoren vanligvis bygge en nyere pakke tatt fra en nyere versjon av Debian - såsom <emphasis role=\"distribution\">Testing</emphasis> eller til og med <emphasis role=\"distribution\">Unstable</emphasis> — slik at denne nye pakken virker i deres <emphasis role=\"distribution\">Stable</emphasis>-distribusjon; denne operation kalles “backporting”. Som vanlig, bør man være forsiktig før en tar på seg en slik oppgave, me sjekke om den har blitt gjort allerede: ta en rask titt på Debian Package Tracker for å se om pakken kan vise informasjon om det. <ulink type=\"block\" url=\"https://tracker.debian.org/\" /> <indexterm><primary>backport</primary></indexterm>"

msgid "Getting the Sources"
msgstr "Å skaffe kildene"

msgid "Rebuilding a Debian package starts with getting its source code. The easiest way is to use the <command>apt-get source <replaceable>source-package-name</replaceable></command> command. This command requires a <literal>deb-src</literal> line in the <filename>/etc/apt/sources.list</filename> file, and up-to-date index files (i.e. <command>apt-get update</command>). These conditions should already be met if you followed the instructions from the chapter dealing with APT configuration (see <xref linkend=\"sect.apt-sources.list\" />). Note however, that you will be downloading the source packages from the Debian version mentioned in the <literal>deb-src</literal> line. If you need another version, you may need to download it manually from a Debian mirror or from the web site. This involves fetching two or three files (with extensions <filename>*.dsc</filename> — for <emphasis>Debian Source Control</emphasis> — <filename>*.tar.<replaceable>comp</replaceable></filename>, and sometimes <filename>*.diff.gz</filename> or <filename>*.debian.tar.<replaceable>comp</replaceable></filename> — <replaceable>comp</replaceable> taking one value among <literal>gz</literal>, <literal>bz2</literal> or <literal>xz</literal> depending on the compression tool in use), then run the <command>dpkg-source -x <replaceable>file.dsc</replaceable></command> command. If the <filename>*.dsc</filename> file is directly accessible at a given URL, there is an even simpler way to fetch it all, with the <command>dget <replaceable>URL</replaceable></command> command. This command (which can be found in the <emphasis role=\"pkg\">devscripts</emphasis> package) fetches the <filename>*.dsc</filename> file at the given address, then analyzes its contents, and automatically fetches the file or files referenced within. Once everything has been downloaded, it extracts the source package (unless the <literal>-d</literal> or <literal>--download-only</literal> option is used)."
msgstr "Å bygge om en Debian pakke starter med å skaffe seg kildekoden. Den enkleste måten er å bruke <command>apt-get source <replaceable>source-package-name</replaceable></command>-kommandoen. Denne kommanoen krever en  <literal>deb-src</literal>-linje i <filename>/etc/apt/sources.list</filename>-filen, og oppdaterte indeksfiler( det er <command>apt-get update</command>). Disse betingelsene skulle allerede være imøtekommet hvis du fulgte instrujksjonene from kapitelet om APT-konfigurasjon (se <xref linkend=\"sect.apt-sources.list\" />). Merk imidlertid at du vil laste ned kildekodepakkene fra den Debian-versjonen som er nevnt i <literal>deb-src</literal>-linjen. Hvis du trenger en annen versjon, må du kanskje laste den ned manuelt fra et Debian speil eller fra nettstedet. Dette innebærer henting av to eller tre filer (med utvidelser <filename>*.dsc</filename> — for <emphasis>Debian Source Control</emphasis> — <filename>*.tar.<replaceable>comp</replaceable></filename>, og noen ganger  <filename>*.diff.gz</filename> eller <filename>*.debian.tar.<replaceable>comp</replaceable></filename> — <replaceable>comp</replaceable> som tar en verdi blant <literal>gz</literal>, <literal>bz2</literal> eller <literal>xz</literal> avhengig av det kompresjonsverktøyet som er i bruk), så kjør <command>dpkg-source -x <replaceable>file.dsc</replaceable></command>-kommandoen. Hvis <filename>*.dsc</filename>-filen er tilgjengelig direkte fra en gitt URL, er det en til og med enklere vei å få tak i alt sammen, med <command>dget <replaceable>URL</replaceable></command>-kommandoen. Denne kommandoen (som kan bli funnet i <emphasis role=\"pkg\">devscripts</emphasis> pakken) fanger opp <filename>*.dsc</filename>-filen på den gitte adressen, så analyserer den innholdet, og filen eller filene det refereres til hentes automatisk. Når alt er lastet ned, pakkes kildepakken ut (såfremt <literal>-d</literal> eller <literal>--download-only</literal>-valget er benyttet)."

msgid "Making Changes"
msgstr "Å lage forandringer"

msgid "The source of the package is now available in a directory named after the source package and its version (for instance, <emphasis>samba-4.1.17+dfsg</emphasis>); this is where we'll work on our local changes."
msgstr "Pakkekilden er tilgjengelig i en katalog oppkalt etter kildepakkes versjon (for eksempel <emphasis>samba-4.1.17+dfsg</emphasis>); Dette er der vi skal jobbe med våre lokale endringer."

msgid "The first thing to do is to change the package version number, so that the rebuilt packages can be distinguished from the original packages provided by Debian. Assuming the current version is <literal>2:4.1.17+dfsg-2</literal>, we can create version <literal>2:4.1.17+dfsg-2falcot1</literal>, which clearly indicates the origin of the package. This makes the package version number higher than the one provided by Debian, so that the package will easily install as an update to the original package. Such a change is best effected with the <command>dch</command> command (<emphasis>Debian CHangelog</emphasis>) from the <emphasis role=\"pkg\">devscripts</emphasis> package, with an command such as <command>dch --local falcot</command>. This invokes a text editor (<command>sensible-editor</command> — this should be your favorite editor if it is mentioned in the <varname>VISUAL</varname> or <varname>EDITOR</varname> environment variables, and the default editor otherwise) to allow documenting the differences brought by this rebuild. This editor shows us that <command>dch</command> really did change the <filename>debian/changelog</filename> file."
msgstr "Det første du må gjøre er å endre pakkens versjonsnummer, slik at de gjenoppbygde pakkene kan skilles fra de opprinnelige pakkene som følger med Debian. Forutsatt at gjeldende versjon er <literal>2:4.1.17+dfsg-2</literal>, kan vi lage versjon <literal>2:4.1.17+dfsg-2falcot1</literal>, som tydelig viser opprinnelsen av pakken. Dette gjør pakkens versjonsnummer høyere enn den som tilbys av Debian, slik at pakken lett vil installeres som en oppdatering til den opprinnelige pakken. En slik endring er best utføres med <command>dch</command>-kommandoen (<emphasis>Debian CHangelog</emphasis>) fra <emphasis role=\"pkg\">devscripts</emphasis>-pakken med en kommando slik som <command>dch --local falcot</command>. Dette tar i bruk en tekstredigere (<command>sensible-editor</command> — dette burder være din favorittredigerer hvis den er nevnt i  <varname>VISUAL</varname> eller <varname>EDITOR</varname>-miljøvariablene, og ellers standard redigereren) for å tillate å dokumentere forskjellene som følger av denne ombygningen. Denne redigereren viser oss at <command>dch</command> virkelig forandret <filename>debian/changelog</filename>-filen."

msgid "When a change in build options is required, the changes need to be made in <filename>debian/rules</filename>, which drives the steps in the package build process. In the simplest cases, the lines concerning the initial configuration (<literal>./configure …</literal>) or the actual build (<literal>$(MAKE) …</literal> or <literal>make …</literal>) are easy to spot. If these commands are not explicitly called, they are probably a side effect of another explicit command, in which case please refer to their documentation to learn more about how to change the default behavior. With packages using <command>dh</command>, you might need to add an override for the <command>dh_auto_configure</command> or <command>dh_auto_build</command> commands (see their respective manual pages for explanations on how to achieve this)."
msgstr "Når det kreves en endring i oppbyggingen, må det lages endringer i  <filename>debian/rules</filename>, som skritt for skrit driver pakkens byggeprosess. I de enkleste tilfellene, er linjene om den opprinnelige konfigurasjonen (<literal>./configure …</literal>) eller i den aktuelle utgaven (<literal>$(MAKE) …</literal> or <literal>make …</literal>) enkle å finne. Hvis disse kommandoene ikke påkalles eksplisitt kalles, er de sannsynligvis en bivirkning av en annen eksplisitt kommando, i så fall kan du se i dokumentasjonen for å lære mer om hvordan du endrer standard virkemåten. Med pakker som bruker <command>dh</command>, kan du trenge å legge til en overstyring for <command>dh_auto_configure</command> eller <command>dh_auto_build</command>-kommandoene (se de respektive manualsidene deres for forklaringer om hvordan du oppnå dette)."

msgid "Depending on the local changes to the packages, an update may also be required in the <filename>debian/control</filename> file, which contains a description of the generated packages. In particular, this file contains <literal>Build-Depends</literal> lines controlling the list of dependencies that must be fulfilled at package build time. These often refer to versions of packages contained in the distribution the source package comes from, but which may not be available in the distribution used for the rebuild. There is no automated way to determine if a dependency is real or only specified to guarantee that the build should only be attempted with the latest version of a library — this is the only available way to force an <emphasis>autobuilder</emphasis> to use a given package version during build, which is why Debian maintainers frequently use strictly versioned build-dependencies."
msgstr "Avhengig av de lokale endringene pakkene, kan en oppdatering også være nødvendig i <filename>debian/control</filename>-filen, som inneholder en beskrivelse av de genererte pakker. Spesielt inneholder denne filen <literal>Build-Depends</literal> linjer som kontrollerer listen over avhengigheter som må være oppfylt når pakken bygges. Disse refererer ofte til versjonene til pakkene i distribusjonen kildepakken kommer fra, men som kanskje ikke er tilgjengelig i distribusjonen som brukes til ombygging. Det er ingen automatisk måte å avgjøre om en avhengighet er ekte, eller bare spesifisert til å garantere at bygget kun skal bli forsøkt med den nyeste versjonen av et bibliotek - dette er den eneste tilgjengelige måten å tvinge en <emphasis>autobuilder</emphasis> til å bruke en gitt pakkeversjon under oppbyggingen, og det er derfor Debians vedlikeholdere ofte bruker strenge versjonsbestemte bygge-avhengigheter."

msgid "If you know for sure that these build-dependencies are too strict, you should feel free to relax them locally. Reading the files which document the standard way of building the software — these files are often called <filename>INSTALL</filename> — will help you figure out the appropriate dependencies. Ideally, all dependencies should be satisfiable from the distribution used for the rebuild; if they are not, a recursive process starts, whereby the packages mentioned in the <literal>Build-Depends</literal> field must be backported before the target package can be. Some packages may not need backporting, and can be installed as-is during the build process (a notable example is <emphasis role=\"pkg\">debhelper</emphasis>). Note that the backporting process can quickly become complex if you are not careful. Therefore, backports should be kept to a strict minimum when possible."
msgstr "Hvis du vet sikkert at disse bygge-avhengigheter er for strenge, bør du føle deg fri til å løsne på dem lokalt. Å lese filene som dokumenterer den vanlige måten å bygge programvare - disse filene blir ofte kalt <filename>INSTALL</filename> — vil hjelpe deg å finne de riktige avhengighetene. Ideelt sett bør alle avhengigheter være imøtekommet fra distribusjonen som brukes til ombygging. Hvis de ikke er det, starter en gjentakingsprosess, der pakkene nevnt i <literal>Build-Depends</literal> feltet må backportes før målet pakken kan bli det. Noen pakker trenger kanskje ikke backporting, og kan installeres som de er i løpet av byggeprosessen (et kjent eksempel er <emphasis role=\"pkg\">debhelper</emphasis>). Merk at backporting-prosessen raskt kan bli komplisert hvis du ikke er forsiktig. Derfor bør backporter holdes på et absolutt minimum der det er mulig."

#, fuzzy
msgid "<emphasis>TIP</emphasis> Installing <literal>Build-Depends</literal>"
msgstr "<emphasis>TIP</emphasis> Installing <literal>Build-Depends</literal>"

#, fuzzy
msgid "<primary><literal>Build-Depends</literal>, control field</primary>"
msgstr "<primary><literal>Build-Depends</literal>, control field</primary>"

msgid "<command>apt-get</command> allows installing all packages mentioned in the <literal>Build-Depends</literal> fields of a source package available in a distribution mentioned in a <literal>deb-src</literal> line of the <filename>/etc/apt/sources.list</filename> file. This is a simple matter of running the <command>apt-get build-dep <replaceable>source-package</replaceable></command> command."
msgstr "<command>apt-get</command> tillater installasjon av alle pakker nevnt i  <literal>Build-Depends</literal>-feltene til en kildepakke som er tilgjengelig i en distribusjon nevnt i en <literal>deb-src</literal> line i <filename>/etc/apt/sources.list</filename>-filen. Dette er så enkelt om å kjøre <command>apt-get build-dep <replaceable>source-package</replaceable></command>-kommandoen."

msgid "Starting the Rebuild"
msgstr "Å starte en gjenoppbygging"

msgid "When all the needed changes have been applied to the sources, we can start generating the actual binary package (<filename>.deb</filename> file). The whole process is managed by the <command>dpkg-buildpackage</command> command."
msgstr "Når alle de nødvendige endringene har blitt brukt på kildene, kan vi starte å generere den aktuelle binære pakkefilen (<filename>.deb</filename>). Hele prosessen er håndtert av <command>dpkg-buildpackage</command>-kommandoen."

msgid "Rebuilding a package"
msgstr "Å bygge om en pakke"

#, fuzzy
msgid ""
"<computeroutput>$ </computeroutput><userinput>dpkg-buildpackage -us -uc\n"
"</userinput><computeroutput>[...]\n"
"</computeroutput>"
msgstr ""
"<computeroutput>$ </computeroutput><userinput>dpkg-buildpackage -us -uc\n"
"</userinput><computeroutput>[...]\n"
"</computeroutput>"

#, fuzzy
msgid "<emphasis>TOOL</emphasis> <command>fakeroot</command>"
msgstr "<emphasis>TOOL</emphasis> <command>fakeroot</command>"

msgid "In essence, the package creation process is a simple matter of gathering in an archive a set of existing (or built) files; most of the files will end up being owned by <emphasis>root</emphasis> in the archive. However, building the whole package under this user would imply increased risks; fortunately, this can be avoided with the <command>fakeroot</command> command. This tool can be used to run a program and give it the impression that it runs as <emphasis>root</emphasis> and creates files with arbitrary ownership and permissions. When the program creates the archive that will become the Debian package, it is tricked into creating an archive containing files marked as belonging to arbitrary owners, including <emphasis>root</emphasis>. This setup is so convenient that <command>dpkg-buildpackage</command> uses <command>fakeroot</command> by default when building packages."
msgstr "I hovedsak er prosessen med å bygge pakker en så enkel sak som, i et arkiv, å samle et sett av eksisterende (eller bygde) filer. De fleste filene vil så bli eid av <emphasis>root</emphasis> i arkivet. Men å bygge hele pakken under denne brukeren skulle tilsi økt risiko. Heldigvis kan dette unngås med <command>fakeroot</command>-kommandoen. Dette verktøyet kan brukes til å kjøre et program og gi det inntrykk av at det kjører som <emphasis>root</emphasis> og skaper filer med vilkårlig eierskap og rettigheter. Når programmet skaper arkivet som vil bli Debian-pakken, er det lurt til å skape et arkiv som inneholder filer merket som tilhørende vilkårlige eiere, inkludert <emphasis>root</emphasis>. Dette oppsettet er så praktisk at <command>dpkg-buildpackage</command> bruker <command>fakeroot</command> som standard ved pakkebygging."

msgid "Note that the program is only tricked into “believing” that it operates as a privileged account, and the process actually runs as the user running <command>fakeroot <replaceable>program</replaceable></command> (and the files are actually created with that user's permissions). At no time does it actually get root privileges that it could abuse."
msgstr "Merk at programmet bare er lurt til å \"tro\" at det fungerer som en priviligert konto, og prosessen faktisk kjører som om brukeren kjører <command>fakeroot <replaceable>program</replaceable></command> (og filene faktisk er opprettet med den brukerens tillatelser). Ikke på noe tidspunkt får det faktisk rotprivilegier som det kunne misbruke."

msgid "The previous command can fail if the <literal>Build-Depends</literal> fields have not been updated, or if the related packages are not installed. In such a case, it is possible to overrule this check by passing the <literal>-d</literal> option to <command>dpkg-buildpackage</command>. However, explicitly ignoring these dependencies runs the risk of the build process failing at a later stage. Worse, the package may seem to build correctly but fail to run properly: some programs automatically disable some of their features when a required library is not available at build time."
msgstr "Den tidligere kommandoen kan mislykkes hvis <literal>Build-Depends</literal>-feltene ikke her blitt oppdatert, eller hvis de relaterte pakker ikke er installert. I dette tilfelle er det mulig å overprøve denne sjekken ved å sende <literal>-d</literal>-valget til <command>dpkg-buildpackage</command>. Men å eksplisitt ignorere disse avhengigheter gir risiko for at byggeprosessen mislykkes på et senere tidspunkt. Verre, kan pakken synes å bli bygget riktig, men klarer ikke å kjøre skikkelig: Noen programmer deaktiverer automatisk noen av sine oppgaver når et nødvendig bibliotek er ikke tilgjengelig på byggetidspunktet."

msgid "More often than not, Debian developers use a higher-level program such as <command>debuild</command>; this runs <command>dpkg-buildpackage</command> as usual, but it also adds an invocation of a program that runs many checks to validate the generated package against the Debian policy. This script also cleans up the environment so that local environment variables do not “pollute” the package build. The <command>debuild</command> command is one of the tools in the <emphasis>devscripts</emphasis> suite, which share some consistency and configuration to make the maintainers' task easier."
msgstr "Oftere enn ikke bruker Debian-utviklere et høynivå-program som <command>debuild</command>; Dette kjører <command>dpkg-buildpackage</command> til vanlig, men legger også til en påkalling til et program som kjører mange kontroller for å validere den genererte pakken opp mot Debians politikk. Dette skriptet renser også opp i miljøet, slik at lokale miljøvariabler ikke \"forurenser\" pakkebyggingen. <command>debuild</command>-kommandoen er et av verktøyene i <emphasis>devscripts</emphasis>-pakken, som deler noe konsistens og oppsett for å gjøre vedlikeholderens oppgave enklere."

#, fuzzy
msgid "<emphasis>QUICK LOOK</emphasis> <command>pbuilder</command>"
msgstr "<emphasis>QUICK LOOK</emphasis> <command>pbuilder</command>"

#, fuzzy
msgid "<primary><command>pbuilder</command></primary>"
msgstr "<primary><command>pbuilder</command></primary>"

msgid "The <command>pbuilder</command> program (in the similarly named package) allows building a Debian package in a <emphasis>chrooted</emphasis> environment. It first creates a temporary directory containing the minimal system required for building the package (including the packages mentioned in the <emphasis>Build-Depends</emphasis> field). This directory is then used as the root directory (<filename>/</filename>), using the <command>chroot</command> command, during the build process."
msgstr "<command>pbuilder</command>-programmet (i pakken med det tilsvarende navnet) tillater bygging av en Debian-pakke i en  <emphasis>chrooted</emphasis>-omgivelse. Den lager først en midlertidig katalog med det minimale systemet som kreves for å bygge pakken (inkludert pakkene nevnt i <emphasis>Build-Depends</emphasis>-feltet). Denne katalogen blir så brukt som rotkatalog (<filename>/</filename>), og bruker <command>chroot</command>-kommandoen under byggeprosessen."

msgid "This tool allows the build process to happen in an environment that is not altered by users' manipulations. This also allows for quick detection of the missing build-dependencies (since the build will fail unless the appropriate dependencies are documented). Finally, it allows building a package for a Debian version that is not the one used by the system as a whole: the machine can be using <emphasis role=\"distribution\">Stable</emphasis> for its normal workload, and a <command>pbuilder</command> running on the same machine can be using <emphasis role=\"distribution\">Unstable</emphasis> for package builds."
msgstr "Dette verktøyet gjør at byggeprosessen skjer i et miljø som ikke endres av brukernes virksomhet. Dette gir også mulighet for rask påvisning av manglende bygge-avhengigheter (siden byggingen vil mislykkes uten dokumentasjon av de riktige avhengighetene). Til slutt, tillater det å bygge en pakke for en Debian-versjon som ikke er den som brukes av systemet som helhet: Maskinen kan  bruke <emphasis role=\"distribution\">Stable</emphasis> i sitt normale arbeid, og  en <command>pbuilder</command> som kjører på den samme maskinen, kan bruke <emphasis role=\"distribution\">Unstable</emphasis> til pakkebygging."

msgid "Building your First Package"
msgstr "Å bygge din første pakke"

msgid "Meta-Packages or Fake Packages"
msgstr "Meta-pakker eller falsk pakker"

msgid "Fake packages and meta-packages are similar, in that they are empty shells that only exist for the effects their meta-data have on the package handling stack."
msgstr "Falske pakker og meta-pakker er like, ved at de er tomme skall som bare eksisterer for effektene meta-dataene deres har på pakkehåndterings-stabelen."

msgid "The purpose of a fake package is to trick <command>dpkg</command> and <command>apt</command> into believing that some package is installed even though it's only an empty shell. This allows satisfying dependencies on a package when the corresponding software was installed outside the scope of the packaging system. Such a method works, but it should still be avoided whenever possible, since there is no guarantee that the manually installed software behaves exactly like the corresponding package would and other packages depending on it would not work properly."
msgstr "Formålet med en falsk pakke er å lure <command>dpkg</command> og <command>apt</command> til å tro at noen pakker er installert, selv om de bare er et tomt skall. Dette tillater å tilfredsstille avhengigheter i en pakke når den tilsvarende programvaren ble installert utenfor rammen av pakkesystemet. En slik metode fungerer, men bør likevel unngås når det er mulig, ettersom det ikke er noen garanti for at den manuelt installerte programvaren oppfører seg akkurat som den tilsvarende pakken ville ha gjort, og andre pakker som er avhengig av den, ikke vil fungere ordentlig."

msgid "On the other hand, a meta-package exists mostly as a collection of dependencies, so that installing the meta-package will actually bring in a set of other packages in a single step."
msgstr "På den annen side foreligger det en meta-pakke oftest som en samling av avhengigheter, slik at montering av meta-pakken faktisk vil føre inn et sett av andre pakker i et enkelt trinn."

msgid "Both these kinds of packages can be created by the <command>equivs-control</command> and <command>equivs-build</command> commands (in the <emphasis role=\"pkg\">equivs</emphasis> package). The <command>equivs-control <replaceable>file</replaceable></command> command creates a Debian package header file that should be edited to contain the name of the expected package, its version number, the name of the maintainer, its dependencies, and its description. Other fields without a default value are optional and can be deleted. The <literal>Copyright</literal>, <literal>Changelog</literal>, <literal>Readme</literal> and <literal>Extra-Files</literal> fields are not standard fields in Debian packages; they only make sense within the scope of <command>equivs-build</command>, and they will not be kept in the headers of the generated package."
msgstr "Begge disse pakkesalgene kan lages av <command>equivs-control</command> og <command>equivs-build</command>-kommandoene (i <emphasis role=\"pkg\">equivs</emphasis>-pakken). <command>equivs-control <replaceable>file</replaceable></command>-kommandoen oppretter en Debian-pakke topptekstfil som skal redigeres for å inneholde navnet på den forventede pakken, dens versjonsnummer, navnet på vedlikeholderen, avhengighetene, og beskrivelsen. Andre felt uten en standardverdi er valgfrie og kan slettes.<literal>Copyright</literal>, <literal>Changelog</literal>, <literal>Readme</literal> og <literal>Extra-Files</literal>-feltene er ikke standard felt i Debian-pakker; de bare gir mening innenfor rammen av <command>equivs-build</command>, og de vil ikke bli beholdt i overskriftene til den genererte pakken."

msgid "Header file of the <emphasis>libxml-libxml-perl</emphasis> fake package"
msgstr "Topptekstfil for den falske pakken <emphasis>libxml-libxml-perl</emphasis>"

#, fuzzy
msgid ""
"\n"
"Section: perl\n"
"Priority: optional\n"
"Standards-Version: 3.9.6\n"
"\n"
"Package: libxml-libxml-perl\n"
"Version: 2.0116-1\n"
"Maintainer: Raphael Hertzog &lt;hertzog@debian.org&gt;\n"
"Depends: libxml2 (&gt;= 2.7.4)\n"
"Architecture: all\n"
"Description: Fake package - module manually installed in site_perl\n"
" This is a fake package to let the packaging system\n"
" believe that this Debian package is installed. \n"
" .\n"
" In fact, the package is not installed since a newer version\n"
" of the module has been manually compiled &amp; installed in the\n"
" site_perl directory."
msgstr ""
"\n"
"Section: perl\n"
"Priority: optional\n"
"Standards-Version: 3.9.6\n"
"\n"
"Package: libxml-libxml-perl\n"
"Version: 2.0116-1\n"
"Maintainer: Raphael Hertzog &lt;hertzog@debian.org&gt;\n"
"Depends: libxml2 (&gt;= 2.7.4)\n"
"Architecture: all\n"
"Description: Fake package - module manually installed in site_perl\n"
" This is a fake package to let the packaging system\n"
" believe that this Debian package is installed. \n"
" .\n"
" In fact, the package is not installed since a newer version\n"
" of the module has been manually compiled &amp; installed in the\n"
" site_perl directory."

msgid "The next step is to generate the Debian package with the <command>equivs-build <replaceable>file</replaceable></command> command. Voilà: the package is created in the current directory and it can be handled like any other Debian package would."
msgstr "Det neste skrittet er å generere Debian-pakken med <command>equivs-build <replaceable>file</replaceable></command>-kommandoen. Og plutselig er pakken opprettet i den gjeldende katalogen, og kan håndteres som en hver annen Debian-pakke ville blitt."

msgid "Simple File Archive"
msgstr "Et enkelt filarkiv"

msgid "The Falcot Corp administrators need to create a Debian package in order to ease deployment of a set of documents on a large number of machines. The administrator in charge of this task first reads the “New Maintainer's Guide”, then starts working on their first package. <ulink type=\"block\" url=\"https://www.debian.org/doc/manuals/maint-guide/\" />"
msgstr "For å lette utplasseringen av et sett med dokumentasjon på et stort antall maskiner, trenger Falcot Corp administratorene å lage en Debian-pakke. Administratoren med ansvaret for denne oppgaven leser først “New Maintainer's Guide”, og begynner så å jobbe med sin første pakke. <ulink type=\"block\" url=\"https://www.debian.org/doc/manuals/maint-guide/\" />"

msgid "The first step is creating a <filename>falcot-data-1.0</filename> directory to contain the target source package. The package will logically, be named <literal>falcot-data</literal> and bear the <literal>1.0</literal> version number. The administrator then places the document files in a <filename>data</filename> subdirectory. Then they invoke the <command>dh_make</command> command (from the <emphasis role=\"pkg\">dh-make</emphasis> package) to add files required by the package generation process, which will all be stored in a <filename>debian</filename> subdirectory:"
msgstr "Det første skrittet er å lage en <filename>falcot-data-1.0</filename>-mappe som skal inneholde mål-kildepakken. Pakken vil logisk nok få navnet <literal>falcot-data</literal> og bære versjonsnummeret <literal>1.0</literal>. Adminisstratoren plasserer så dokumentaasjonsfilene i en <filename>data</filename>-undermappe. Så påkaller de <command>dh_make</command>-kommandoen  (fra <emphasis role=\"pkg\">dh-make</emphasis>-pakken) for å legge til filene som kreves for pakke-genereringsprosessen, - som alle blir lagret i en <filename>debian</filename>-undermappe:"

#, fuzzy
msgid ""
"\n"
"<computeroutput>$ </computeroutput><userinput>cd falcot-data-1.0</userinput>\n"
"<computeroutput>$ </computeroutput><userinput>dh_make --native</userinput>\n"
"<computeroutput>\n"
"Type of package: single binary, indep binary, multiple binary, library, kernel module, kernel patch?\n"
" [s/i/m/l/k/n] </computeroutput><userinput>i</userinput>\n"
"<computeroutput>\n"
"Maintainer name : Raphael Hertzog\n"
"Email-Address   : hertzog@debian.org\n"
"Date            : Fri, 04 Sep 2015 12:09:39 -0400\n"
"Package Name    : falcot-data\n"
"Version         : 1.0\n"
"License         : gpl3\n"
"Type of Package : Independent\n"
"Hit &lt;enter&gt; to confirm:\n"
"Currently there is no top level Makefile. This may require additional tuning.\n"
"Done. Please edit the files in the debian/ subdirectory now. You should also\n"
"check that the falcot-data Makefiles install into $DESTDIR and not in / .\n"
"$</computeroutput>"
msgstr ""
"\n"
"<computeroutput>$ </computeroutput><userinput>cd falcot-data-1.0</userinput>\n"
"<computeroutput>$ </computeroutput><userinput>dh_make --native</userinput>\n"
"<computeroutput>\n"
"Type of package: single binary, indep binary, multiple binary, library, kernel module, kernel patch?\n"
" [s/i/m/l/k/n] </computeroutput><userinput>i</userinput>\n"
"<computeroutput>\n"
"Maintainer name : Raphael Hertzog\n"
"Email-Address   : hertzog@debian.org\n"
"Date            : Fri, 04 Sep 2015 12:09:39 -0400\n"
"Package Name    : falcot-data\n"
"Version         : 1.0\n"
"License         : gpl3\n"
"Type of Package : Independent\n"
"Hit &lt;enter&gt; to confirm:\n"
"Currently there is no top level Makefile. This may require additional tuning.\n"
"Done. Please edit the files in the debian/ subdirectory now. You should also\n"
"check that the falcot-data Makefiles install into $DESTDIR and not in / .\n"
"$</computeroutput>"

msgid "The selected type of package (<emphasis>indep binary</emphasis>) indicates that this source package will generate a single binary package that can be shared across all architectures (<literal>Architecture: all</literal>). <emphasis>single binary</emphasis> acts as a counterpart, and leads to a single binary package that is dependent on the target architecture (<literal>Architecture: any</literal>). In this case, the former choice is more relevant since the package only contains documents and no binary programs, so it can be used similarly on computers of all architectures."
msgstr "Den valgte pakketypen (<emphasis>indep binary</emphasis>) indikerer at denne kildepakken vil generere en enkelt binær pakke som kan deles på tvers av alle arkitekturer (<literal>Architecture: all</literal>). <emphasis>single binary</emphasis> virker som en motpart, og fører til en enkelt binærpakke som er avhengig av målarkitekturen (<literal>Architecture: any</literal>). I dette tilfellet er valget mer relevant, siden pakken bare inneholder dokumentasjon og ingen binære programmer, slik at den kan brukes på samme måte på datamaskiner av alle arkitekturer."

#, fuzzy
msgid "<primary>package types</primary>"
msgstr "<primary>package types</primary>"

#, fuzzy
msgid "<primary>package</primary><secondary>types</secondary>"
msgstr "<primary>package</primary><secondary>types</secondary>"

msgid "The <emphasis>multiple binary</emphasis> type corresponds to a source package leading to several binary packages. A particular case, <emphasis>library</emphasis>, is useful for shared libraries, since they need to follow strict packaging rules. In a similar fashion, <emphasis>kernel module</emphasis> or <emphasis>kernel patch</emphasis> should be restricted to packages containing kernel modules."
msgstr "<emphasis>multiple binary</emphasis>-typen svarer til en kildekodepakke som leder til forskjellige binærpakker. Et spesielt tilfelle,  <emphasis>library</emphasis>,  er nyttig for delte biblioteker, siden de må følge strenge pakkeregler. På lignende måte skal <emphasis>kernel module</emphasis> eller <emphasis>kernel patch</emphasis> begrenses til pakker som inneholder kjernemoduler."

msgid "<emphasis>TIP</emphasis> Maintainer's name and email address"
msgstr "<emphasis>TIP</emphasis> Vedlikeholders navn og e-post"

msgid "Most of the programs involved in package maintenance will look for your name and email address in the <varname>DEBFULLNAME</varname> and <varname>DEBEMAIL</varname> or <varname>EMAIL</varname> environment variables. Defining them once and for all will avoid you having to type them multiple times. If your usual shell is <command>bash</command>, it is a simple matter of adding the following two lines in your <filename>~/.bashrc</filename> file (you will obviously replace the values with more relevant ones!):"
msgstr "De fleste programmene involvert i pakkevedlikeholdet vil søke etter ditt navn og e-postadresse i <varname>DEBFULLNAME</varname> og <varname>DEBEMAIL</varname> eller <varname>EMAIL</varname>-miljøvariabler. Ved å definere dem en gang for alle, vil du unngå å måtte sortere dem flere ganger. Hvis ditt vanlige skall er <command>bash</command>, er det bare å legge til følgende to linjer i din <filename>~/.bashrc</filename>-file (du vil ganske sikkert erstatte verdiene med noen mer relevante!):"

#, fuzzy
msgid ""
"\n"
"export EMAIL=\"hertzog@debian.org\"\n"
"export DEBFULLNAME=\"Raphael Hertzog\""
msgstr ""
"\n"
"export EMAIL=\"hertzog@debian.org\"\n"
"export DEBFULLNAME=\"Raphael Hertzog\""

msgid "The <command>dh_make</command> command created a <filename>debian</filename> subdirectory with many files. Some are required, in particular <filename>rules</filename>, <filename>control</filename>, <filename>changelog</filename> and <filename>copyright</filename>. Files with the <filename>.ex</filename> extension are example files that can be used by modifying them (and removing the extension) when appropriate. When they are not needed, removing them is recommended. The <filename>compat</filename> file should be kept, since it is required for the correct functioning of the <emphasis>debhelper</emphasis> suite of programs (all beginning with the <command>dh_</command> prefix) used at various stages of the package build process."
msgstr "<command>dh_make</command>-kommandoen laget en <filename>debian</filename> undermappe med mange filer. Noen kreves, spesielt <filename>rules</filename>, <filename>control</filename>, <filename>changelog</filename> og <filename>copyright</filename>. Filer mede <filename>.ex</filename>-forlengelsen er eksempelfiler som kan brukes ved å  modifisere dem (og fjerne forlengelsen) når det passer. Når de ikke er nødvendige, anbefales det å fjerne dem. <filename>compat</filename> bør beholdes, ettersom den er nødvendig for riktig funksjon av <emphasis>debhelper</emphasis>-programpakken (som alle begynner med  <command>dh_</command>-forstavelsen), og som brukes på ulike stadier i pakkebyggingsprosessen."

msgid "The <filename>copyright</filename> file must contain information about the authors of the documents included in the package, and the related license. In our case, these are internal documents and their use is restricted to within the Falcot Corp company. The default <filename>changelog</filename> file is generally appropriate; replacing the “Initial release” with a more verbose explanation and changing the distribution from <literal>unstable</literal> to <literal>internal</literal> is enough. The <filename>control</filename> file was also updated: the <literal>Section</literal> field has been changed to <emphasis>misc</emphasis> and the <literal>Homepage</literal>, <literal>Vcs-Git</literal> and <literal>Vcs-Browser</literal> fields were removed. The <literal>Depends</literal> fields was completed with <literal>iceweasel | www-browser</literal> so as to ensure the availability of a web browser able to display the documents in the package."
msgstr "<filename>copyright</filename> må inneholde informasjon om forfatterne av dokumentasjonen som er inkludert i pakken, og den tilhørende lisensen. I vårt tilfelle, er intern dokumentasjon bruken av den er begrenset til til Falcot Corp-selskapet. Standardfilen <filename>changelog</filename> er vanligvis hensiktsmessig; den erstatter \"Første utgivelse\" med en mer detaljert forklaring og endrer disgtribusjonen fra <literal>unstable</literal> til <literal>internal</literal> er nok. <filename>control</filename>-filen ble også oppdatert: <literal>Section</literal>-feltet er forandret til <emphasis>misc</emphasis> og <literal>Homepage</literal>, <literal>Vcs-Git</literal> og <literal>Vcs-Browser</literal>-feltene ble forandret. <literal>Depends</literal>-feltene ble komplettert med <literal>iceweasel | www-browser</literal> for å sikre tilgjengeligheten for en pålitelig nettleser som kan vise dokumentasjoen i pakken."

msgid "The <filename>control</filename> file"
msgstr "<filename>control</filename>-filen"

#, fuzzy
msgid ""
"\n"
"Source: falcot-data\n"
"Section: misc\n"
"Priority: optional\n"
"Maintainer: Raphael Hertzog &lt;hertzog@debian.org&gt;\n"
"Build-Depends: debhelper (&gt;= 9)\n"
"Standards-Version: 3.9.5\n"
"\n"
"Package: falcot-data\n"
"Architecture: all\n"
"Depends: iceweasel | www-browser, ${misc:Depends}\n"
"Description: Internal Falcot Corp Documentation\n"
" This package provides several documents describing the internal\n"
" structure at Falcot Corp.  This includes:\n"
"  - organization diagram\n"
"  - contacts for each department.\n"
" .\n"
" These documents MUST NOT leave the company.\n"
" Their use is INTERNAL ONLY."
msgstr ""
"\n"
"Source: falcot-data\n"
"Section: misc\n"
"Priority: optional\n"
"Maintainer: Raphael Hertzog &lt;hertzog@debian.org&gt;\n"
"Build-Depends: debhelper (&gt;= 9)\n"
"Standards-Version: 3.9.5\n"
"\n"
"Package: falcot-data\n"
"Architecture: all\n"
"Depends: iceweasel | www-browser, ${misc:Depends}\n"
"Description: Internal Falcot Corp Documentation\n"
" This package provides several documents describing the internal\n"
" structure at Falcot Corp.  This includes:\n"
"  - organization diagram\n"
"  - contacts for each department.\n"
" .\n"
" These documents MUST NOT leave the company.\n"
" Their use is INTERNAL ONLY."

msgid "The <filename>changelog</filename> file"
msgstr "<filename>changelog</filename>-filen"

#, fuzzy
msgid ""
"\n"
"falcot-data (1.0) internal; urgency=low\n"
"\n"
"  * Initial Release.\n"
"  * Let's start with few documents:\n"
"    - internal company structure;\n"
"    - contacts for each department.\n"
"\n"
" -- Raphael Hertzog &lt;hertzog@debian.org&gt;  Fri, 04 Sep 2015 12:09:39 -0400"
msgstr ""
"\n"
"falcot-data (1.0) internal; urgency=low\n"
"\n"
"  * Initial Release.\n"
"  * Let's start with few documents:\n"
"    - internal company structure;\n"
"    - contacts for each department.\n"
"\n"
" -- Raphael Hertzog &lt;hertzog@debian.org&gt;  Fri, 04 Sep 2015 12:09:39 -0400"

msgid "The <filename>copyright</filename> file"
msgstr "<filename>copyright</filename>-filen"

#, fuzzy
msgid ""
"\n"
"Format: http://www.debian.org/doc/packaging-manuals/copyright-format/1.0/\n"
"Upstream-Name: falcot-data\n"
"\n"
"Files: *\n"
"Copyright: 2004-2015 Falcot Corp\n"
"License: \n"
" All rights reserved."
msgstr ""
"\n"
"Format: http://www.debian.org/doc/packaging-manuals/copyright-format/1.0/\n"
"Upstream-Name: falcot-data\n"
"\n"
"Files: *\n"
"Copyright: 2004-2015 Falcot Corp\n"
"License: \n"
" All rights reserved."

#, fuzzy
msgid "<emphasis>BACK TO BASICS</emphasis> <filename>Makefile</filename> file"
msgstr "<emphasis>BACK TO BASICS</emphasis> <filename>Makefile</filename> file"

#, fuzzy
msgid "<primary><filename>Makefile</filename></primary>"
msgstr "<primary><filename>Makefile</filename></primary>"

msgid "A <filename>Makefile</filename> file is a script used by the <command>make</command> program; it describes rules for how to build a set of files from each other in a tree of dependencies (for instance, a program can be built from a set of source files). The <filename>Makefile</filename> file describes these rules in the following format:"
msgstr "<filename>Makefile</filename>-filen er et skript som brukes av  <command>make</command>-programmet; Det beskriver regler for hvordan man skal bygge et sett med filer fra hverandre i et tre med avhengigheter (for eksempel, kan et program bygges fra et sett med kildefiler). <filename>Makefile</filename>-filen beskriver disse reglene i det følgende formatet:"

#, fuzzy
msgid ""
"\n"
"target: source1 source2 ...\n"
"        command1\n"
"        command2"
msgstr ""
"\n"
"target: source1 source2 ...\n"
"        command1\n"
"        command2"

msgid "The interpretation of such a rule is as follows: if one of the <literal>source*</literal> files is more recent than the <literal>target</literal> file, then the target needs to be generated, using <command>command1</command> and <command>command2</command>."
msgstr "Tolkningen av slik regel er som følger: Hvis en av <literal>source*</literal>-filene er nyere enn <literal>target</literal>-filen, trenger målet generering ved å bruke <command>command1</command> og <command>command2</command>."

msgid "Note that the command lines must start with a tab character; also note that when a command line starts with a dash character (<literal>-</literal>), failure of the command does not interrupt the whole process."
msgstr "Merk at kommandolinjene må starte med et TAB-tegn; Merk også at når en kommandolinje starter med en skråstrek (<literal>-</literal>), avbryter ikke feil i kommandoen hele prosessen."

msgid "The <filename>rules</filename> file usually contains a set of rules used to configure, build and install the software in a dedicated subdirectory (named after the generated binary package). The contents of this subdirectory is then archived within the Debian package as if it were the root of the filesystem. In our case, files will be installed in the <filename>debian/falcot-data/usr/share/falcot-data/</filename> subdirectory, so that installing the generated package will deploy the files under <filename>/usr/share/falcot-data/</filename>. The <filename>rules</filename> file is used as a <filename>Makefile</filename>, with a few standard targets (including <literal>clean</literal> and <literal>binary</literal>, used respectively to clean the source directory and generate the binary package)."
msgstr "<filename>rules</filename>-filen inneholder vanligvis et sett med regler til å konfigurere, bygge og installere programvaren i en egen underkatalog (oppkalt etter den genererte binære pakken). Innholdet i denne underkatalogen blir deretter arkivert i Debian-pakken som om det var roten i filsystemet. I vårt tilfelle vil filene bli installert i <filename>debian/falcot-data/usr/share/falcot-data/</filename>-undermappe, slik at å installere den genererte pakken, vil plassere  filene under <filename>/usr/share/falcot-data/</filename>.  <filename>rules</filename>-filen blir brukt som en <filename>Makefile</filename>, med noen få standard mål (medregnet <literal>clean</literal> og <literal>binary</literal>, respektivt brukt til å rydde opp i kildemappen og generere binærpakken)."

msgid "Although this file is the heart of the process, it increasingly contains only the bare minimum for running a standard set of commands provided by the <command>debhelper</command> tool. Such is the case for files generated by <command>dh_make</command>. To install our files, we simply configure the behavior of the <command>dh_install</command> command by creating the following <filename>debian/falcot-data.install</filename> file:"
msgstr "Selv om denne filen er hjertet av prosessen, inneholder den i økende grad bare et minimum for å kjøre et standard sett med kommandoer gitt av <command>debhelper</command>-verktøyet. Slik som er tilfellet for filer generert av <command>dh_make</command>. -For å installere våre filer, må vi ganske enkelt sette opp the atferden til <command>dh_install</command>-kommandoen ved å lage den følgende <filename>debian/falcot-data.install</filename>-filen:"

#, fuzzy
msgid ""
"\n"
"data/* usr/share/falcot-data/"
msgstr ""
"\n"
"data/* usr/share/falcot-data/"

msgid "At this point, the package can be created. We will however add a lick of paint. Since the administrators want the documents to be easily accessed from the menus of graphical desktop environments, we add a <filename>falcot-data.desktop</filename> file and get it installed in <filename>/usr/share/applications</filename> by adding a second line to <filename>debian/falcot-data.install</filename>."
msgstr "På dette tidspunktet kan pakken opprettes. Vi vil imidlertid legge til et malingstrøk. Siden administratorene ønsker at dokumentasjonen blir lett tilgjengelig fra menyene i grafiske skrivebordsmiljøer, legger vi til en <filename>falcot-data.desktop</filename>-file og får den installert i  <filename>/usr/share/applications</filename> ved å legger til en andre linje til  <filename>debian/falcot-data.install</filename>."

msgid "The <filename>falcot-data.desktop</filename> file"
msgstr "<filename>falcot-data.desktop</filename>-filen"

#, fuzzy
msgid ""
"\n"
"[Desktop Entry]\n"
"Name=Internal Falcot Corp Documentation\n"
"Comment=Starts a browser to read the documentation\n"
"Exec=x-www-browser /usr/share/falcot-data/index.html\n"
"Terminal=false\n"
"Type=Application\n"
"Categories=Documentation;"
msgstr ""
"\n"
"[Desktop Entry]\n"
"Name=Internal Falcot Corp Documentation\n"
"Comment=Starts a browser to read the documentation\n"
"Exec=x-www-browser /usr/share/falcot-data/index.html\n"
"Terminal=false\n"
"Type=Application\n"
"Categories=Documentation;"

msgid "The updated <filename>debian/falcot-data.install</filename> looks like this:"
msgstr "Den oppdaterte <filename>debian/falcot-data.install</filename> ser slik ut:"

#, fuzzy
msgid ""
"\n"
"data/* usr/share/falcot-data/\n"
"falcot-data.desktop usr/share/applications/"
msgstr ""
"\n"
"data/* usr/share/falcot-data/\n"
"falcot-data.desktop usr/share/applications/"

msgid "Our source package is now ready. All that's left to do is to generate the binary package, with the same method we used previously for rebuilding packages: we run the <command>dpkg-buildpackage -us -uc</command> command from within the <filename>falcot-data-1.0</filename> directory."
msgstr "Vår kildepakke er nå klar. Alt som gjenstår å gjøre er å generere den binære pakken, med den samme metoden vi brukte tidligere for å bygge om pakker: vi kjører <command>dpkg-buildpackage -us -uc</command>-kommandoen fra <filename>falcot-data-1.0</filename>-mappen."

msgid "Creating a Package Repository for APT"
msgstr "Å lage en pakkebrønn for APT"

#, fuzzy
msgid "<primary>package archive</primary>"
msgstr "<primary>package archive</primary>"

#, fuzzy
msgid "<primary>package</primary><secondary>Debian</secondary><tertiary>archive of</tertiary>"
msgstr "<primary>package</primary><secondary>Debian</secondary><tertiary>archive of</tertiary>"

msgid "Falcot Corp gradually started maintaining a number of Debian packages either locally modified from existing packages or created from scratch to distribute internal data and programs."
msgstr "Falcot Corp begynte gradvis å vedlikeholde en rekke Debian-pakker, enten lokalt endret fra eksisterende pakker, eller laget fra bunnen av, for å distribuere interne data og programmer."

msgid "To make deployment easier, they want to integrate these packages in a package archive that can be directly used by APT. For obvious maintenance reasons, they wish to separate internal packages from locally-rebuilt packages. The goal is for the matching entries in a <filename>/etc/apt/sources.list.d/falcot.list</filename> file to be as follows:"
msgstr "For å gjøre utplassering lettere, ønsker de å integrere disse pakkene i et pakkearkiv som kan brukes direkte av APT. Av åpenbare vedlikeholdsgrunner, ønsker de å skille interne pakker fra lokalt ombygde pakker. Målet for de samsvarende oppføringene i en <filename>/etc/apt/sources.list.d/falcot.list</filename>-fil er som følger:"

#, fuzzy
msgid ""
"\n"
"deb http://packages.falcot.com/ updates/\n"
"deb http://packages.falcot.com/ internal/"
msgstr ""
"\n"
"deb http://packages.falcot.com/ updates/\n"
"deb http://packages.falcot.com/ internal/"

#, fuzzy
msgid "<primary><command>mini-dinstall</command></primary>"
msgstr "<primary><command>mini-dinstall</command></primary>"

msgid "The administrators therefore configure a virtual host on their internal HTTP server, with <filename>/srv/vhosts/packages/</filename> as the root of the associated web space. The management of the archive itself is delegated to the <command>mini-dinstall</command> command (in the similarly-named package). This tool keeps an eye on an <filename>incoming/</filename> directory (in our case, <filename>/srv/vhosts/packages/mini-dinstall/incoming/</filename>) and waits for new packages there; when a package is uploaded, it is installed into a Debian archive at <filename>/srv/vhosts/packages/</filename>. The <command>mini-dinstall</command> command reads the <filename>*.changes</filename> file created when the Debian package is generated. These files contain a list of all other files associated with the version of the package (<filename>*.deb</filename>, <filename>*.dsc</filename>, <filename>*.diff.gz</filename>/<filename>*.debian.tar.gz</filename>, <filename>*.orig.tar.gz</filename>, or their equivalents with other compression tools), and these allow <command>mini-dinstall</command> to know which files to install. <filename>*.changes</filename> files also contain the name of the target distribution (often <literal>unstable</literal>) mentioned in the latest <filename>debian/changelog</filename> entry, and <command>mini-dinstall</command> uses this information to decide where the package should be installed. This is why administrators must always change this field before building a package, and set it to <literal>internal</literal> or <literal>updates</literal>, depending on the target location. <command>mini-dinstall</command> then generates the files required by APT, such as <filename>Packages.gz</filename>."
msgstr "Administratorene konfigurerer derfor en virtuell maskin på deres interne HTTP-tjener, med <filename>/srv/vhosts/packages/</filename> som roten til det tilhørende nettområdet. Håndteringen av selve arkivet er delegert til <command>mini-dinstall</command>-kommandoen (i den tilsvarende navngitt pakken). Dette verktøyet holder et øye med en <filename>incoming/</filename> mappe (i vårt tilfelle, <filename>/srv/vhosts/packages/mini-dinstall/incoming/</filename>) og venter på nye pakker der; når en pakke er lastet opp, blir den installert i et Debian-arkivet på <filename>/srv/vhosts/packages/</filename>. <command>mini-dinstall</command>-kommandoen leser <filename>*.changes</filename>-filen som opprettes når Debian pakken blir generert. Disse filene inneholder en liste med alle andre filer knyttet til den versjonen av pakken  (<filename>*.deb</filename>, <filename>*.dsc</filename>, <filename>*.diff.gz</filename>/<filename>*.debian.tar.gz</filename>, <filename>*.orig.tar.gz</filename>, eller tilsvarende med andre komprimeringsverktøy), og disse åpner for at <command>mini-dinstall</command> får vite hvilke filer som skal installeres. <filename>*.changes</filename>-filer inneholder også navnet på måldistribusjonen (ofte <literal>unstable</literal>) nevnt i den siste <filename>debian/changelog</filename> inngangen, og <command>mini-dinstall</command> bruker denne informasjonen til å avgjøre hvor pakken skal installeres. Dette er grunnen til administratorer må alltid endre dette feltet før de bygger en pakke, og setter det til <literal>internal</literal> eller <literal>updates</literal>, avhengig av måldistribusjonen. <command>mini-dinstall</command> genererer deretter filene som kreves av APT, for eksempel <filename>Packages.gz</filename>."

#, fuzzy
msgid "<emphasis>ALTERNATIVE</emphasis> <command>apt-ftparchive</command>"
msgstr "<emphasis>ALTERNATIVE</emphasis> <command>apt-ftparchive</command>"

#, fuzzy
msgid "<primary><command>apt-ftparchive</command></primary>"
msgstr "<primary><command>apt-ftparchive</command></primary>"

msgid "If <command>mini-dinstall</command> seems too complex for your Debian archive needs, you can also use the <command>apt-ftparchive</command> command. This tool scans the contents of a directory and displays (on its standard output) a matching <filename>Packages</filename> file. In the Falcot Corp case, administrators could upload the packages directly into <filename>/srv/vhosts/packages/updates/</filename> or <filename>/srv/vhosts/packages/internal/</filename>, then run the following commands to create the <filename>Packages.gz</filename> files:"
msgstr "Hvis <command>mini-dinstall</command> ser for omfattende ut for dine Debian-arkiv-behov, kan du også bruke <command>apt-ftparchive</command>-kommandoen. Dette verktøyet skanner innholdet i en katalog og viser (i sine standard utdata) en samsvarende <filename>Packages</filename>-fil. I Falcot Corp tilfellet, kunne administratorer laste pakkene direkte inn i <filename>/srv/vhosts/packages/updates/</filename> eller <filename>/srv/vhosts/packages/internal/</filename>, og så kjøre de følgende kommandoer for å lage <filename>Packages.gz</filename>-filene:"

#, fuzzy
msgid ""
"\n"
"<computeroutput>$ </computeroutput><userinput>cd /srv/vhosts/packages</userinput>\n"
"<computeroutput>$ </computeroutput><userinput>apt-ftparchive packages updates &gt;updates/Packages</userinput>\n"
"<computeroutput>$ </computeroutput><userinput>gzip updates/Packages</userinput>\n"
"<computeroutput>$ </computeroutput><userinput>apt-ftparchive packages internal &gt;internal/Packages</userinput>\n"
"<computeroutput>$ </computeroutput><userinput>gzip internal/Packages</userinput>"
msgstr ""
"\n"
"<computeroutput>$ </computeroutput><userinput>cd /srv/vhosts/packages</userinput>\n"
"<computeroutput>$ </computeroutput><userinput>apt-ftparchive packages updates &gt;updates/Packages</userinput>\n"
"<computeroutput>$ </computeroutput><userinput>gzip updates/Packages</userinput>\n"
"<computeroutput>$ </computeroutput><userinput>apt-ftparchive packages internal &gt;internal/Packages</userinput>\n"
"<computeroutput>$ </computeroutput><userinput>gzip internal/Packages</userinput>"

msgid "The <command>apt-ftparchive sources</command> command allows creating <filename>Sources.gz</filename> files in a similar fashion."
msgstr "<command>apt-ftparchive sources</command>-kommandoen åpner for å lage <filename>Sources.gz</filename>-filer på en lignende måte."

msgid "Configuring <command>mini-dinstall</command> requires setting up a <filename>~/.mini-dinstall.conf</filename> file; in the Falcot Corp case, the contents are as follows:"
msgstr "Å konfigurere <command>mini-dinstall</command> krever oppsett av en <filename>~/.mini-dinstall.conf</filename>-fil; i Falcot Corp-tilfellet, er innholdet som følger:"

#, fuzzy
msgid ""
"\n"
"[DEFAULT]\n"
"archive_style = flat\n"
"archivedir = /srv/vhosts/packages\n"
"\n"
"verify_sigs = 0\n"
"mail_to = admin@falcot.com\n"
"\n"
"generate_release = 1\n"
"release_origin = Falcot Corp\n"
"release_codename = stable\n"
"\n"
"[updates]\n"
"release_label = Recompiled Debian Packages\n"
"\n"
"[internal]\n"
"release_label = Internal Packages"
msgstr ""
"\n"
"[DEFAULT]\n"
"archive_style = flat\n"
"archivedir = /srv/vhosts/packages\n"
"\n"
"verify_sigs = 0\n"
"mail_to = admin@falcot.com\n"
"\n"
"generate_release = 1\n"
"release_origin = Falcot Corp\n"
"release_codename = stable\n"
"\n"
"[updates]\n"
"release_label = Recompiled Debian Packages\n"
"\n"
"[internal]\n"
"release_label = Internal Packages"

msgid "One decision worth noting is the generation of <filename>Release</filename> files for each archive. This can help manage package installation priorities using the <filename>/etc/apt/preferences</filename> configuration file (see <xref linkend=\"sect.apt.priorities\" /> for details)."
msgstr "En avgjørelse verdt å merke seg er generasjonen <filename>Release</filename>-filer for hvert arkiv. Dette kan hjelpe til med å administrere pakkeinstallasjonsprioriteringer med hjelp av <filename>/etc/apt/preferences</filename>-konfigurasjonsfilen (se <xref linkend=\"sect.apt.priorities\" /> for detaljer)."

msgid "<emphasis>SECURITY</emphasis> <command>mini-dinstall</command> and permissions"
msgstr "<emphasis>SECURITY</emphasis> <command>mini-dinstall</command> og tillatelser"

msgid "Since <command>mini-dinstall</command> has been designed to run as a regular user, there's no need to run it as root. The easiest way is to configure everything within the user account belonging to the administrator in charge of creating the Debian packages. Since only this administrator has the required permissions to put files in the <filename>incoming/</filename> directory, we can deduce that the administrator authenticated the origin of each package prior to deployment and <command>mini-dinstall</command> does not need to do it again. This explains the <literal>verify_sigs = 0</literal> parameter (which means that signatures need not be verified). However, if the contents of packages are sensitive, we can reverse the setting and elect to authenticate with a keyring containing the public keys of persons allowed to create packages (configured with the <literal>extra_keyrings</literal> parameter); <command>mini-dinstall</command> will then check the origin of each incoming package by analyzing the signature integrated to the <filename>*.changes</filename> file."
msgstr "Etterat <command>mini-dinstall</command> er designet for å kjøres som en vanlig bruker, er det ikke nødvendig å kjøre den som rot. Den enkleste måten er å konfigurere alt innen brukerkontoen som tilhører administratoren med ansvar for å lage Debian-pakker. Ettersom bare denne administratoren har de nødvendige tillatelsene til å sette filer inn i <filename>incoming/</filename>-katalogen, kan vi utlede at administratoren har autentisert opprinnelsen til hver pakke før utplasseringen og <command>mini-dinstall</command> trenger ikke å gjøre det igjen. Dette forklarer <literal>verify_sigs = 0</literal>-parameteret (noe som betyr at signaturene ikke behøver å være bekreftet). Men hvis innholdet i pakkene er sensitivt, kan vi snu innstillingen og velge å godkjenne en ring med nøkler som inneholder offentlige nøkler til personer med lov til å lage pakker (konfigurert med <literal>extra_keyrings</literal> parameter); <command>mini-dinstall</command>  vil så sjekke opprinnelsen til hver innkommende pakke ved å analysere signaturen integrert i <filename>*.changes</filename>-filen."

msgid "Invoking <command>mini-dinstall</command> actually starts a daemon in the background. As long as this daemon runs, it will check for new packages in the <filename>incoming/</filename> directory every half-hour; when a new package arrives, it will be moved to the archive and the appropriate <filename>Packages.gz</filename> and <filename>Sources.gz</filename> files will be regenerated. If running a daemon is a problem, <command>mini-dinstall</command> can also be manually invoked in batch mode (with the <literal>-b</literal> option) every time a package is uploaded into the <filename>incoming/</filename> directory. Other possibilities provided by <command>mini-dinstall</command> are documented in its <citerefentry><refentrytitle>mini-dinstall</refentrytitle> <manvolnum>1</manvolnum></citerefentry> manual page."
msgstr "Å påkalle <command>mini-dinstall</command> faktisk starter en nisse i bakgrunnen. Så lenge denne nissen kjører vil den se etter nye pakker i <filename>incoming/</filename> mappen hver halvtime; Når en ny pakke kommer, vil det bli flyttet til arkivet og riktige <filename>Packages.gz</filename> og <filename>Sources.gz</filename>-filer blir fornyet. Hvis det å kjøre en nisse er et problem, kan og <command>mini-dinstall</command> påkalles manuelt i  rekkefølge (med <literal>-b</literal>-valget) hver gang en pakke blir lastet inn i   <filename>incoming/</filename>-mappen. Andre muligheter som ligger i <command>mini-dinstall</command> er dokumentert på sin <citerefentry><refentrytitle>mini-dinstall</refentrytitle> <manvolnum>1</manvolnum></citerefentry>-manualside."

msgid "<emphasis>EXTRA</emphasis> Generating a signed archive"
msgstr "<emphasis>EXTRA</emphasis> Å genere et signert arkiv"

msgid "The APT suite checks a chain of cryptographic signatures on the packages it handles before installing them, in order to ensure their authenticity (see <xref linkend=\"sect.package-authentication\" />). Private APT archives can then be a problem, since the machines using them will keep displaying warnings about unsigned packages. A diligent administrator will therefore integrate private archives with the secure APT mechanism."
msgstr "For å sikre autentisiteten kontrollerer APT-pakken en kjede med kryptografiske signaturer for pakkene den håndterer før de installeres, (se <xref linkend=\"sect.package-authentication\" />). Private APT arkiver kan så bli et problem, ettersom maskinene som bruker dem vil holde på med å vise advarsler om usignerte pakker. En flittig administrator vil derfor integrere privatarkiver med den sikre APT-mekanismen."

msgid "To help with this process, <command>mini-dinstall</command> includes a <literal>release_signscript</literal> configuration option that allows specifying a script to use for generating the signature. A good starting point is the <filename>sign-release.sh</filename> script provided by the <emphasis role=\"pkg\">mini-dinstall</emphasis> package in <filename>/usr/share/doc/mini-dinstall/examples/</filename>; local changes may be relevant."
msgstr "For å hjelpe til med denne prosessen inkluderer <command>mini-dinstall</command> et <literal>release_signscript</literal>-oppsettsalternativt som tillater å spesifisere et skript som skal brukes til å generere signaturen. Et godt utgangspunkt er <filename>sign-release.sh</filename>-skriptet fra <emphasis role=\"pkg\">mini-dinstall</emphasis>-pakken i <filename>/usr/share/doc/mini-dinstall/examples/</filename>; lokale endringer kan være relevante."

msgid "Becoming a Package Maintainer"
msgstr "Å bli en pakkevedlikeholder"

msgid "Learning to Make Packages"
msgstr "Å lære å lage pakker"

msgid "Creating a quality Debian package is not always a simple task, and becoming a package maintainer takes some learning, both with theory and practice. It's not a simple matter of building and installing software; rather, the bulk of the complexity comes from understanding the problems and conflicts, and more generally the interactions, with the myriad of other packages available."
msgstr "Å  opprette en Debian-pakke med kvalitet er ikke alltid en enkel oppgave, å bli en pakkeutvikler krever litt læring, både teori og praksis. Det er ingen en enkel sak å bygge og installere programvare; for mesteparten av kompleksiteten kommer fra forstå problemer og konflikter, og mer generelt samhandlingene, med utallige andre pakker tilgjengelige."

msgid "Rules"
msgstr "Regler"

msgid "A Debian package must comply with the precise rules compiled in the Debian policy, and each package maintainer must know them. There is no requirement to know them by heart, but rather to know they exist and to refer to them whenever a choice presents a non-trivial alternative. Every Debian maintainer has made mistakes by not knowing about a rule, but this is not a huge problem as long as the error gets fixed when a user reports it as a bug report (which tends to happen fairly soon thanks to advanced users). <ulink type=\"block\" url=\"https://www.debian.org/doc/debian-policy/\" />"
msgstr "En Debian- pakke må være i samsvar de presise regler utarbeidet i Debians politikk, og hver pakkeutvikler må kjenne til dem. Det er ingen krav om å kjenne dem utenat, men heller å vite at de eksisterer og referere til dem når et valg presenterer et ikke-trivielt alternativ. Hver Debian-vedlikeholder har gjort feil ved å ikke kjenne til en regel, men det er ikke et stort problem, så lenge feilen blir fikset når en bruker rapporterer den som en feilrapport (som pleier å skje ganske snart, takket være avanserte brukere). <ulink type=\"block\" url=\"https://www.debian.org/doc/debian-policy/\" />"

msgid "Procedures"
msgstr "Prosedyrer"

#, fuzzy
msgid "<primary>Debian Developer's Reference</primary>"
msgstr "<primary>Debian Developer's Reference</primary>"

msgid "Debian is not a simple collection of individual packages. Everyone's packaging work is part of a collective project; being a Debian developer involves knowing how the Debian project operates as a whole. Every developer will, sooner or later, interact with others. The Debian Developer's Reference (in the <emphasis role=\"pkg\">developers-reference</emphasis> package) summarizes what every developer must know in order to interact as smoothly as possible with the various teams within the project, and to take the best possible advantages of the available resources. This document also enumerates a number of duties a developer is expected to fulfill. <ulink type=\"block\" url=\"https://www.debian.org/doc/manuals/developers-reference/\" />"
msgstr "Debian er ikke en enkel samling av enkeltpakker. Alles pakkearbeid er en del av et kollektivt prosjekt; å være en Debians-utvikler innebærer å vite hvordan Debian-prosjektet fungerer som en helhet. Hver utbygger vil, før eller senere, samhandle med andre. \"Debian Developer's Reference\" (i <emphasis role=\"pkg\">developers-reference</emphasis> package) oppsummerer hva alle utviklere må vite for å samhandle så smidig som mulig med de ulike teamene i prosjektet, og for å få mest mulig ut av de tilgjengelige ressursene. Dette dokumentet oppsummerer også en rekke oppgaver en utvikler forventes å oppfylle. <ulink type=\"block\" url=\"https://www.debian.org/doc/manuals/developers-reference/\" />"

msgid "Tools"
msgstr "Verktøy"

msgid "Many tools help package maintainers in their work. This section describes them quickly, but does not give the full details, since they all have comprehensive documentation of their own."
msgstr "Mange verktøy hjelper pakkevedlikeholdere med deres arbeid. Denne seksjonen gir en rask gjennomgang, uten alle detaljene, ettersom verktøyene har sin egen omfattende dokumentasjon."

msgid "The <command>lintian</command> Program"
msgstr "<command>lintian</command>-programmet"

#, fuzzy
msgid "<primary><command>lintian</command></primary>"
msgstr "<primary><command>lintian</command></primary>"

msgid "This tool is one of the most important: it's the Debian package checker. It is based on a large array of tests created from the Debian policy, and detects quickly and automatically many errors that can then be fixed before packages are released."
msgstr "Dette verktøyet er en av de viktigste: Det er Debian pakke-sjekkeren. Den bygger på et stort utvalg av tester opprettet fra Debian-politikken, og oppdager raskt og automatisk mange feil som deretter kan rettes før pakkene utgis."

msgid "This tool is only a helper, and it sometimes gets it wrong (for instance, since the Debian policy changes over time, <command>lintian</command> is sometimes outdated). It is also not exhaustive: not getting any Lintian error should not be interpreted as a proof that the package is perfect; at most, it avoids the most common errors."
msgstr "Dette verktøyet er bare en hjelper, og noen ganger gjør den feil (for eksempel, siden Debian-politikken endrer seg over tid, blir <command>lintian</command>  noen ganger utdatert). Det er heller ikke uttømmende: Å ikke får noen Lintian-feil bør ikke tolkes som et bevis på at pakken er perfekt; i beste fall unngås de  vanligste feilene."

msgid "The <command>piuparts</command> Program"
msgstr "<command>piuparts</command> programmet"

#, fuzzy
msgid "<primary><command>piuparts</command></primary>"
msgstr "<primary><command>piuparts</command></primary>"

msgid "This is another important tool: it automates the installation, upgrade, removal and purge of a package (in an isolated environment), and checks that none of these operations leads to an error. It can help in detecting missing dependencies, and it also detects when files are incorrectly left over after the package got purged."
msgstr "Dette er et annet viktig redskap: Det automatiserer installasjonen, oppgraderer, fjerner og renser en pakke (i et isolert miljø), og kontrollerer at ingen av disse operasjonene fører til feil. Det kan hjelpe til med å avdekke manglende avhengigheter, og det oppdager også når filer feilaktig er til overs etterat pakken er renset."

#, fuzzy
msgid "devscripts"
msgstr "devscripts"

#, fuzzy
msgid "<primary><emphasis role=\"pkg\">devscripts</emphasis></primary>"
msgstr "<primary><emphasis role=\"pkg\">devscripts</emphasis></primary>"

#, fuzzy
msgid "<primary><command>debuild</command></primary>"
msgstr "<primary><command>debuild</command></primary>"

#, fuzzy
msgid "<primary><command>dch</command></primary>"
msgstr "<primary><command>dch</command></primary>"

#, fuzzy
msgid "<primary><command>uscan</command></primary>"
msgstr "<primary><command>uscan</command></primary>"

#, fuzzy
msgid "<primary><command>debi</command></primary>"
msgstr "<primary><command>debi</command></primary>"

#, fuzzy
msgid "<primary><command>debc</command></primary>"
msgstr "<primary><command>debc</command></primary>"

msgid "The <emphasis role=\"pkg\">devscripts</emphasis> package contains many programs helping with a wide array of a Debian developer's job:"
msgstr "<emphasis role=\"pkg\">devscripts</emphasis>-pakken inneholder mange programmer som hjelper til på et stort område i Debian-utviklerens jobb:"

msgid "<command>debuild</command> allows generating a package (with <command>dpkg-buildpackage</command>) and running <command>lintian</command> to check its compliance with the Debian policy afterwards."
msgstr "<command>debuild</command> tillater å generere en pakke (med <command>dpkg-buildpackage</command>) og kjøre <command>lintian</command> for så å sjekke overensstemmelsen med Debian-politikken."

msgid "<command>debclean</command> cleans a source package after a binary package has been generated."
msgstr "<command>debclean</command> renser en kildepakke etterat en binærpakke har blitt generert."

msgid "<command>dch</command> allows quick and easy editing of a <filename>debian/changelog</filename> file in a source package."
msgstr "<command>dch</command> tillater en raskt og enkel redigering av en  <filename>debian/changelog</filename>-fil i en kildepakke."

msgid "<command>uscan</command> checks whether a new version of a software has been released by the upstream author; this requires a <filename>debian/watch</filename> file with a description of the location of such releases."
msgstr "<command>uscan</command> sjekker om en ny programvareversjon er utgitt av oppstrømsforfatteren; Dette krever en <filename>debian/watch</filename>-fil med beskrivelse av plasseringen av slike utgivelser."

msgid "<command>debi</command> allows installing (with <command>dpkg -i</command>) the Debian package that was just generated without the need to type its full name and path."
msgstr "<command>debi</command> tillater installering (med <command>dpkg -i</command>) av Debian-pakken som nettopp ble generert, uten å måtte skrive inn dens fulle navn og sti."

msgid "In a similar fashion, <command>debc</command> allows scanning the contents of the recently-generated package (with <command>dpkg -c</command>), without needing to type its full name and path."
msgstr "På lignende måte tillater <command>debc</command> skanning av innholdet i den nylig generert pakken (med <command>dpkg -c</command>), uten å måtte skrive inn dens fulle navn og sti."

msgid "<command>bts</command> controls the bug tracking system from the command line; this program automatically generates the appropriate emails."
msgstr "<command>bts</command> styrer feilrapporteringssystemet fra kommandolinjen; Dette programmet genererer automatisk de riktige e-postene."

msgid "<command>debrelease</command> uploads a recently-generated package to a remote server, without needing to type the full name and path of the related <filename>.changes</filename> file."
msgstr "<command>debrelease</command> laster opp en nylig generert pakke til en ekstern tjener, uten å måtte skrive hele navnet og banen til den relaterte <filename>.changes</filename>-filen."

#, fuzzy
msgid "<command>debsign</command> signs the <filename>*.dsc</filename> and <filename>*.changes</filename> files."
msgstr "<command>debsign</command> signs the <filename>*.dsc</filename> and <filename>*.changes</filename> files."

msgid "<command>uupdate</command> automates the creation of a new revision of a package when a new upstream version has been released."
msgstr "<command>uupdate</command> automatiserer opprettelsen av ny revisjon av en pakke når en ny oppstrøms versjon er utgitt."

msgid "<emphasis role=\"pkg\">debhelper</emphasis> and <emphasis role=\"pkg\">dh-make</emphasis>"
msgstr "<emphasis role=\"pkg\">debhelper</emphasis> og <emphasis role=\"pkg\">dh-make</emphasis>"

#, fuzzy
msgid "<primary><emphasis>debhelper</emphasis></primary>"
msgstr "<primary><emphasis>debhelper</emphasis></primary>"

#, fuzzy
msgid "<primary><emphasis>dh-make</emphasis></primary>"
msgstr "<primary><emphasis>dh-make</emphasis></primary>"

msgid "Debhelper is a set of scripts easing the creation of policy-compliant packages; these scripts are invoked from <filename>debian/rules</filename>. Debhelper has been widely adopted within Debian, as evidenced by the fact that it is used by the majority of official Debian packages. All the commands it contains have a <command>dh_</command> prefix."
msgstr "Debhelper er et sett med skript som letter det å lage pakker som holder seg til  retningslinjene; Disse skriptene påkalles fra <filename>debian/rules</filename>. Debhelper er bredt akseptert innen Debian, noe som gjenspeiles av det faktum at den brukes av de fleste offisielle Debian-pakker. Alle kommandoene den inneholder har en <command>dh_</command>-forstavelse."

msgid "The <command>dh_make</command> script (in the <emphasis>dh-make</emphasis> package) creates files required for generating a Debian package in a directory initially containing the sources for a piece of software. As can be guessed from the name of the program, the generated files use debhelper by default."
msgstr "<command>dh_make</command>-skriptet (i <emphasis>dh-make</emphasis> pakken) lager filer som kreves for å generere Debian-pakke i en katalog som i utgangspunktet inneholder kildene for et stykke programvare. Som det kan gjettes fra navnet på programmet, bruker de genererte filene debhelper som standard."

#, fuzzy
msgid "<command>dupload</command> and <command>dput</command>"
msgstr "<command>dupload</command> and <command>dput</command>"

#, fuzzy
msgid "<primary><command>dupload</command></primary>"
msgstr "<primary><command>dupload</command></primary>"

#, fuzzy
msgid "<primary><command>dput</command></primary>"
msgstr "<primary><command>dput</command></primary>"

msgid "The <command>dupload</command> and <command>dput</command> commands allow uploading a Debian package to a (possibly remote) server. This allows developers to publish their package on the main Debian server (<literal>ftp-master.debian.org</literal>) so that it can be integrated to the archive and distributed by mirrors. These commands take a <filename>*.changes</filename> file as a parameter, and deduce the other relevant files from its contents."
msgstr "<command>dupload</command> og <command>dput</command>-kommandoene tillater å laste opp en Debian-pakke til en (muligens ekstern) tjener. Dette tillater utviklere å publisere sin pakke på Debians hovedtjener (<literal>ftp-master.debian.org</literal>) slik at den kan integreres i arkivet og distribueres av speil. Disse kommandoene tar <filename>*.changes</filename>-filen som et parameter, og utleder de andre relevante filene fra innholdet sitt."

msgid "Acceptance Process"
msgstr "Aksepteringsprosess"

msgid "Becoming a “Debian developer” is not a simple administrative matter. The process comprises several steps, and is as much an initiation as it is a selection process. In any case, it is formalized and well-documented, so anyone can track their progression on the website dedicated to the new member process. <ulink type=\"block\" url=\"https://nm.debian.org/\" />"
msgstr ""

msgid "<emphasis>EXTRA</emphasis> Lightweight process for “Debian Maintainers”"
msgstr ""

msgid "“Debian Maintainer” is another status that gives less privileges than “Debian developer” but whose associated process is quicker. With this status, the contributors can maintain their own packages only. A Debian developer only needs to perform a check on an initial upload, and issue a statement to the effect that they trust the prospective maintainer with the ability to maintain the package on their own."
msgstr ""

msgid "<primary>Debian Maintainer</primary>"
msgstr ""

msgid "Prerequisites"
msgstr ""

msgid "All candidates are expected to have at least a working knowledge of the English language. This is required at all levels: for the initial communications with the examiner, of course, but also later, since English is the preferred language for most of the documentation; also, package users will be communicating in English when reporting bugs, and they will expect replies in English."
msgstr ""

msgid "The other prerequisite deals with motivation. Becoming a Debian developer is a process that only makes sense if the candidate knows that their interest in Debian will last for many months. The acceptance process itself may last for several months, and Debian needs developers for the long haul; each package needs permanent maintenance, and not just an initial upload."
msgstr ""

msgid "Registration"
msgstr ""

msgid "The first (real) step consists in finding a sponsor or advocate; this means an official developer willing to state that they believe that accepting <emphasis>X</emphasis> would be a good thing for Debian. This usually implies that the candidate has already been active within the community, and that their work has been appreciated. If the candidate is shy and their work is not publicly touted, they can try to convince a Debian developer to advocate them by showing their work in a private way."
msgstr ""

msgid "<primary>key pair</primary>"
msgstr "<primary>nøkkelpar</primary>"

msgid "At the same time, the candidate must generate a public/private RSA key pair with GnuPG, which should be signed by at least two official Debian developers. The signature authenticates the name on the key. Effectively, during a key signing party, each participant must show an official identification (usually an ID card or passport) together with their key identifiers. This step confirms the link between the human and the keys. This signature thus requires meeting in real life. If you have not yet met any Debian developers in a public free software conference, you can explicitly seek developers living nearby using the list on the following webpage as a starting point. <ulink type=\"block\" url=\"https://wiki.debian.org/Keysigning\" />"
msgstr ""

msgid "Once the registration on <literal>nm.debian.org</literal> has been validated by the advocate, an <emphasis>Application Manager</emphasis> is assigned to the candidate. The application manager will then drive the process through multiple pre-defined steps and checks."
msgstr ""

msgid "The first verification is an identity check. If you already have a key signed by two Debian developers, this step is easy; otherwise, the application manager will try and guide you in your search for Debian developers close by to organize a meet-up and a key signing."
msgstr ""

msgid "Accepting the Principles"
msgstr ""

msgid "These administrative formalities are followed by philosophical considerations. The point is to make sure that the candidate understands and accepts the social contract and the principles behind Free Software. Joining Debian is only possible if one shares the values that unite the current developers, as expressed in the founding texts (and summarized in <xref linkend=\"the-debian-project\" />)."
msgstr ""

msgid "In addition, each candidate wishing to join the Debian ranks is expected to know the workings of the project, and how to interact appropriately to solve the problems they will doubtless encounter as time passes. All of this information is generally documented in manuals targeting the new maintainers, and in the Debian developer's reference. An attentive reading of this document should be enough to answer the examiner's questions. If the answers are not satisfactory, the candidate will be informed. They will then have to read (again) the relevant documentation before trying again. In the cases where the existing documentation does not contain the appropriate answer for the question, the candidate can usually reach an answer with some practical experience within Debian, or potentially by discussing with other Debian developers. This mechanism ensures that candidates get involved somewhat in Debian before becoming a full part of it. It is a deliberate policy, by which candidates who eventually join the project are integrated as another piece of an infinitely extensible jigsaw puzzle."
msgstr ""

msgid "<primary><emphasis>Philosophy &amp; Procedures</emphasis></primary>"
msgstr ""

msgid "This step is usually known as the <emphasis>Philosophy &amp; Procedures</emphasis> (P&amp;P for short) in the lingo of the developers involved in the new member process."
msgstr ""

msgid "Checking Skills"
msgstr ""

msgid "Each application to become an official Debian developer must be justified. Becoming a project member requires showing that this status is legitimate, and that it facilitates the candidate's job in helping Debian. The most common justification is that being granted Debian developer status eases maintenance of a Debian package, but it is not the only one. Some developers join the project to contribute to porting to a specific architecture, others want to improve documentation, and so on."
msgstr ""

msgid "This step represents the opportunity for the candidate to state what they intend to do within the Debian project and to show what they have already done towards that end. Debian is a pragmatic project and saying something is not enough, if the actions do not match what is announced. Generally, when the intended role within the project is related to package maintenance, a first version of the prospective package will have to be validated technically and uploaded to the Debian servers by a sponsor among the existing Debian developers."
msgstr ""

msgid "<emphasis>COMMUNITY</emphasis> Sponsoring"
msgstr ""

msgid "<primary>sponsoring</primary>"
msgstr ""

msgid "Debian developers can “sponsor” packages prepared by someone else, meaning that they publish them in the official Debian repositories after having performed a careful review. This mechanism enables external persons, who have not yet gone through the new member process, to contribute occasionally to the project. At the same time, it ensures that all packages included in Debian have always been checked by an official member."
msgstr ""

msgid "Finally, the examiner checks the candidate's technical (packaging) skills with a detailed questionnaire. Bad answers are not permitted, but the answer time is not limited. All the documentation is available and several tries are allowed if the first answers are not satisfactory. This step does not intend to discriminate, but to ensure at least a modicum of knowledge common to new contributors."
msgstr ""

msgid "<primary><emphasis>Tasks &amp; Skills</emphasis></primary>"
msgstr ""

msgid "This step is known as the <emphasis>Tasks &amp; Skills</emphasis> step (T&amp;S for short) in the examiners' jargon."
msgstr ""

msgid "Final Approval"
msgstr ""

msgid "At the very last step, the whole process is reviewed by a DAM (<emphasis>Debian Account Manager</emphasis>). The DAM will review all the information about the candidate that the examiner collected, and makes the decision on whether or not to create an account on the Debian servers. In cases where extra information is required, the account creation may be delayed. Refusals are rather rare if the examiner does a good job of following the process, but they sometimes happen. They are never permanent, and the candidate is free to try again at a later time."
msgstr ""

msgid "The DAM's decision is authoritative and (almost) without appeal, which explains why the people in that seat have often been criticized in the past."
msgstr ""
